{"version":3,"file":"squirrelly.min.js","sources":["../../../src/err.ts","../../../src/parse.ts","../../../src/utils.ts","../../../src/storage.ts","../../../src/containers.ts","../../../src/compile-string.ts","../../../src/config.ts","../../../src/compile.ts","../../../src/render.ts"],"sourcesContent":["// v 1.0.32\n\nfunction setPrototypeOf (obj: any, proto: any) {\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(obj, proto)\n  } else {\n    obj.__proto__ = proto\n  }\n}\n\nexport default function SqrlErr (message: string) {\n  var err = new Error(message)\n  setPrototypeOf(err, SqrlErr.prototype)\n  return err\n}\n\nSqrlErr.prototype = Object.create(Error.prototype, {\n  name: { value: 'Squirrelly Error', enumerable: false }\n})\n\n// TODO: Class transpilation adds a lot to the bundle size\n\nexport function ParseErr (message: string, str: string, indx: number) {\n  var whitespace = str\n    .slice(0, indx) // +2 because of {{\n    .split(/\\n/)\n\n  // console.log('whitespace: \\n' + JSON.stringify(whitespace))\n  var lineNo = whitespace.length\n  var colNo = whitespace[lineNo - 1].length + 1\n  message +=\n    ' at line ' +\n    lineNo +\n    ' col ' +\n    colNo +\n    ':\\n\\n' +\n    '  ' +\n    str.split(/\\n/)[lineNo - 1] +\n    '\\n' +\n    '  ' +\n    Array(colNo).join(' ') +\n    '^'\n  throw SqrlErr(message)\n}\n","// Version 1.0.32\nimport { ParseErr } from './err'\nimport { trimLeft, trimRight } from './utils'\nimport { SqrlConfig } from './config'\n\nexport type TagType = '~' | '/' | '#' | '?' | 'r' | '!' | 's'\nexport type TemplateAttribute = 'c' | 'f' | 'fp' | 'p' | 'n' | 'res' | 'err'\nexport type TemplateObjectAttribute = 'c' | 'p' | 'n' | 'res'\n\nexport type AstObject = string | TemplateObject\n\nexport type Filter = [string, string | undefined]\n\nexport interface TemplateObject {\n  n?: string\n  t?: string\n  f: Array<Filter>\n  c?: string\n  p?: string\n  res?: string\n  d: Array<AstObject> // Todo: Make this optional\n  raw?: boolean\n  b?: Array<TemplateObject>\n}\n\nexport default function Parse (\n  str: string,\n  tagOpen: string,\n  tagClose: string,\n  env: SqrlConfig\n): Array<AstObject> {\n  var powerchars = new RegExp(\n    '([|()]|=>)|' +\n    '\\'(?:\\\\\\\\[\\\\s\\\\w\"\\'\\\\\\\\`]|[^\\\\n\\\\r\\'\\\\\\\\])*?\\'|`(?:\\\\\\\\[\\\\s\\\\w\"\\'\\\\\\\\`]|[^\\\\\\\\`])*?`|\"(?:\\\\\\\\[\\\\s\\\\w\"\\'\\\\\\\\`]|[^\\\\n\\\\r\"\\\\\\\\])*?\"' + // matches strings\n      '|\\\\/\\\\*[^]*?\\\\*\\\\/|((\\\\/)?(-|_)?' +\n      tagClose +\n      ')',\n    'g'\n  )\n  var tagOpenReg = new RegExp('([^]*?)' + tagOpen + '(-|_)?\\\\s*', 'g')\n  var startInd = 0\n  var trimNextLeftWs = ''\n\n  function parseTag (): TemplateObject {\n    // console.log(JSON.stringify(match))\n    var currentObj: TemplateObject = { f: [], d: [] }\n    var numParens = 0\n    var firstChar = str[startInd]\n    var currentAttribute: TemplateAttribute = 'c' // default - Valid values: 'c'=content, 'f'=filter, 'fp'=filter params, 'p'=param, 'n'=name\n    var currentType: TagType = 'r' // Default\n    startInd += 1 // assume we're gonna skip the first character\n\n    if (firstChar === '~' || firstChar === '#' || firstChar === '/') {\n      currentAttribute = 'n'\n      currentType = firstChar\n    } else if (firstChar === '!' || firstChar === '?') {\n      // ? for custom\n      currentType = firstChar\n    } else if (firstChar === '*') {\n      currentObj.raw = true\n    } else {\n      startInd -= 1\n    }\n\n    function addAttrValue (indx: number, strng?: string) {\n      var valUnprocessed = str.slice(startInd, indx) + (strng || '')\n      // console.log(valUnprocessed)\n      var val = valUnprocessed.trim()\n      if (currentAttribute === 'f') {\n        if (val === 'safe') {\n          currentObj.raw = true\n        } else {\n          currentObj.f.push([val, ''])\n        }\n      } else if (currentAttribute === 'fp') {\n        currentObj.f[currentObj.f.length - 1][1] += val\n      } else if (currentAttribute === 'err') {\n        if (val) {\n          var found = valUnprocessed.search(/\\S/)\n          ParseErr('invalid syntax', str, startInd + found)\n        }\n      } else if (currentAttribute) {\n        // if (currentObj[currentAttribute]) { // TODO make sure no errs\n        //   currentObj[currentAttribute] += val\n        // } else {\n        currentObj[currentAttribute] = val\n        // }\n      }\n      startInd = indx + 1\n    }\n\n    powerchars.lastIndex = startInd\n\n    var m\n    // tslint:disable-next-line:no-conditional-assignment\n    while ((m = powerchars.exec(str)) !== null) {\n      var char = m[1]\n      var tagClose = m[2]\n      var slash = m[3]\n      var wsControl = m[4]\n      var i = m.index\n\n      if (char) {\n        // Power character\n        if (char === '(') {\n          if (numParens === 0) {\n            if (currentAttribute === 'n') {\n              addAttrValue(i)\n              currentAttribute = 'p'\n            } else if (currentAttribute === 'f') {\n              addAttrValue(i)\n              currentAttribute = 'fp'\n            }\n          }\n          numParens++\n        } else if (char === ')') {\n          numParens--\n          if (numParens === 0 && currentAttribute !== 'c') {\n            // Then it's closing a filter, block, or helper\n            addAttrValue(i)\n\n            currentAttribute = 'err' // Reset the current attribute\n          }\n        } else if (numParens === 0 && char === '|') {\n          addAttrValue(i) // this should actually always be whitespace or empty\n          currentAttribute = 'f'\n          //   TODO if (!currentObj.f) {\n          //     currentObj.f = [] // Initial assign\n          //   }\n        } else if (char === '=>') {\n          addAttrValue(i)\n          startInd += 1 // this is 2 chars\n          currentAttribute = 'res'\n        }\n      } else if (tagClose) {\n        addAttrValue(i)\n        startInd += tagClose.length - 1\n        tagOpenReg.lastIndex = startInd\n        // console.log('tagClose: ' + startInd)\n        trimNextLeftWs = wsControl\n        if (slash && currentType === '~') {\n          currentType = 's'\n        } // TODO throw err\n        currentObj.t = currentType\n        return currentObj\n      }\n    }\n    // TODO: Do I need this?\n    ParseErr('unclosed tag', str, str.length)\n    return currentObj // To prevent TypeScript from erroring\n  }\n\n  function parseContext (parentObj: TemplateObject, firstParse?: boolean): TemplateObject {\n    parentObj.b = [] // assume there will be blocks\n    var lastBlock: TemplateObject | boolean = false\n    var buffer: Array<AstObject> = []\n\n    function pushString (strng: string, wsAhead?: string) {\n      if (strng) {\n        var stringToPush = strng.replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"\\\\'\")\n        if (wsAhead) {\n          stringToPush = trimRight(stringToPush, wsAhead)\n        }\n        if (trimNextLeftWs) {\n          stringToPush = trimLeft(stringToPush, trimNextLeftWs)\n          trimNextLeftWs = ''\n        }\n        buffer.push(stringToPush)\n      }\n    }\n\n    // Random TODO: parentObj.b doesn't need to have t: #\n    var tagOpenMatch\n    // tslint:disable-next-line:no-conditional-assignment\n    while ((tagOpenMatch = tagOpenReg.exec(str)) !== null) {\n      var precedingString = tagOpenMatch[1]\n      var ws = tagOpenMatch[2]\n\n      pushString(precedingString, ws)\n      startInd = tagOpenMatch.index + tagOpenMatch[0].length\n\n      var currentObj = parseTag()\n      // ===== NOW ADD THE OBJECT TO OUR BUFFER =====\n\n      var currentType = currentObj.t\n      if (currentType === '~') {\n        currentObj = parseContext(currentObj) // currentObj is the parent object\n        buffer.push(currentObj)\n      } else if (currentType === '/') {\n        if (parentObj.n === currentObj.n) {\n          if (lastBlock) {\n            // If there's a previous block\n            lastBlock.d = buffer\n            parentObj.b.push(lastBlock)\n          } else {\n            parentObj.d = buffer\n          }\n          // console.log('parentObj: ' + JSON.stringify(parentObj))\n          return parentObj\n        } else {\n          ParseErr(\n            \"Helper start and end don't match\",\n            str,\n            tagOpenMatch.index + tagOpenMatch[0].length\n          )\n        }\n      } else if (currentType === '#') {\n        if (lastBlock) {\n          // If there's a previous block\n          lastBlock.d = buffer\n          parentObj.b.push(lastBlock)\n        } else {\n          parentObj.d = buffer\n        }\n        lastBlock = currentObj // Set the 'lastBlock' object to the value of the current block\n\n        buffer = []\n      } else {\n        buffer.push(currentObj)\n      }\n      // ===== DONE ADDING OBJECT TO BUFFER =====\n    }\n\n    if (firstParse) {\n      // TODO: more intuitive\n      pushString(str.slice(startInd, str.length))\n      parentObj.d = buffer\n    }\n\n    return parentObj\n  }\n\n  var parseResult = parseContext({ f: [], d: [] }, true)\n  // console.log(JSON.stringify(parseResult))\n  return parseResult.d // Parse the very outside context\n}\n","/**\n * Trims either one whitespace character from the beginning of a string, or all\n *\n * @remarks\n * Includes trimLeft polyfill\n *\n * @param str - String to trim\n * @param type - Either '-' (trim only 1 whitespace char) or '_' (trim all whitespace)\n * @returns Trimmed string\n *\n */\n\n// TODO: allow '-' to trim up until newline. Use [^\\S\\n\\r] instead of \\s\n// TODO: only include trimLeft polyfill if not in ES6\n\nfunction trimLeft (str: string, type: string): string {\n  if (type === '_') {\n    // full slurp\n    if (String.prototype.trimLeft) {\n      return str.trimLeft()\n    } else {\n      return str.replace(/^[\\s\\uFEFF\\xA0]+/, '')\n    }\n  } else {\n    // type must be '-'\n    return str.replace(/^(?:[\\s\\uFEFF\\xA0]|\\r\\n)/, '')\n  }\n}\n\n/**\n * Trims either one whitespace character from the end of the string, or all\n *\n * @remarks\n * Includes trimRight polyfill\n *\n * @param str - String to trim\n * @param type - Either '-' (trim only 1 whitespace char) or '_' (trim all whitespace)\n * @returns Trimmed string\n *\n */\n\nfunction trimRight (str: string, type: string): string {\n  if (type === '_') {\n    // full slurp\n    if (String.prototype.trimRight) {\n      return str.trimRight()\n    } else {\n      return str.replace(/[\\s\\uFEFF\\xA0]+$/, '')\n    }\n  } else {\n    // type must be '-'\n    return str.replace(/(?:[\\s\\uFEFF\\xA0]|\\r\\n)$/, '') // TODO: make sure this gets \\r\\n\n  }\n}\n\nexport { trimLeft, trimRight }\n","import SqrlErr from './err'\n\ninterface ICache<T> {\n  // Basically, an object where all keys point to a value of the same type\n  [key: string]: T\n}\n\nclass Cacher<T> {\n  constructor (private cache: ICache<T>) {}\n  define (key: string, val: T) {\n    this.cache[key] = val\n  }\n  get (key: string) {\n    // string | array.\n    // TODO: allow array of keys to look down\n    // TODO: create plugin to allow referencing helpers, filters with dot notation\n    return this.cache[key]\n  }\n  remove (key: string) {\n    delete this.cache[key]\n  }\n  clear () {\n    this.cache = {}\n  }\n  load (cacheObj: ICache<T>) {\n    this.cache = cacheObj\n  }\n}\n\nexport { Cacher }\n","import { Cacher } from './storage'\nimport { AstObject, Filter, TemplateObject } from './parse'\nimport SqrlErr from './err'\nimport { ParseScope } from './compile-string'\nimport { SqrlConfig } from './config'\n\ntype TemplateFunction = (options: object, Sqrl: object) => string\n\n// interface ITemplate {\n//   exec: (options: object, Sqrl: object) => string\n// }\n\nvar Templates = new Cacher<TemplateFunction>({})\n\n// Templates.define(\"hey\", function (it) {return \"hey\"})\n\nvar Layouts = new Cacher<TemplateFunction>({})\n\nvar Partials = new Cacher<TemplateFunction>({})\n\ninterface HelperBlock {\n  exec: Function\n  params: Array<any>\n}\ntype HelperFunction = (content: HelperBlock, blocks: Array<HelperBlock>) => string\n\nvar Helpers = new Cacher<HelperFunction>({\n  each: function (content: HelperBlock) {\n    // helperStart is called with (params, id) but id isn't needed\n    var res = ''\n    var param = content.params[0]\n    for (var i = 0; i < param.length; i++) {\n      res += content.exec(param[i], i)\n    }\n    return res\n  },\n  foreach: function (content: HelperBlock) {\n    var res = ''\n    var param = content.params[0]\n    for (var key in param) {\n      if (!param.hasOwnProperty(key)) continue\n      res += content.exec(param, key)\n    }\n    return res\n  }\n})\n\nvar NativeHelpers = new Cacher<Function>({\n  if: function (buffer: TemplateObject, env: SqrlConfig) {\n    if (buffer.f && buffer.f.length) {\n      throw SqrlErr(\"native helper 'if' can't have filters\")\n    }\n    var returnStr = 'if(' + buffer.p + '){' + ParseScope(buffer.d, env) + '}'\n    if (buffer.b) {\n      for (var i = 0; i < buffer.b.length; i++) {\n        var currentBlock = buffer.b[i]\n        if (currentBlock.n === 'else') {\n          returnStr += 'else{' + ParseScope(currentBlock.d, env) + '}'\n        } else if (currentBlock.n === 'elif') {\n          returnStr += 'else if(' + currentBlock.p + '){' + ParseScope(currentBlock.d, env) + '}'\n        }\n      }\n    }\n    return returnStr\n  },\n  try: function (buffer: TemplateObject, env: SqrlConfig) {\n    if (buffer.f && buffer.f.length) {\n      throw SqrlErr(\"native helper 'try' can't have filters\")\n    }\n    if (!buffer.b || buffer.b.length !== 1 || buffer.b[0].n !== 'catch') {\n      throw SqrlErr(\"native helper 'try' only accepts 1 block, 'catch'\")\n    }\n    var returnStr = 'try{' + ParseScope(buffer.d, env) + '}'\n\n    var currentBlock = buffer.b[0]\n    returnStr +=\n      'catch' +\n      (currentBlock.res ? '(' + currentBlock.res + ')' : '') +\n      '{' +\n      ParseScope(currentBlock.d, env) +\n      '}'\n\n    return returnStr\n  }\n})\n\ntype FilterFunction = (str: string) => string\n\ninterface EscapeMap {\n  '&': '&amp;'\n  '<': '&lt;'\n  '\"': '&quot;'\n  \"'\": '&#39;'\n  [index: string]: string\n}\n\nvar escMap: EscapeMap = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n}\n\nfunction replaceChar (s: string): string {\n  return escMap[s]\n}\n\nfunction XMLEscape (str: any) {\n  // To deal with XSS. Based on Escape implementations of Mustache.JS and Marko, then customized.\n  var newStr = String(str)\n  if (/[&<\"']/.test(newStr)) {\n    return newStr.replace(/[&<\"']/g, replaceChar)\n  } else {\n    return newStr\n  }\n}\n\nvar Filters = new Cacher<FilterFunction>({ e: XMLEscape })\n\nexport { Templates, Layouts, Partials, Helpers, NativeHelpers, Filters }\n","import Parse, { AstObject, Filter, TemplateObject } from './parse'\nimport { NativeHelpers } from './containers'\nimport { SqrlConfig } from './config'\n\nfunction CompileToString (str: string, tagOpen: string, tagClose: string, env: SqrlConfig) {\n  var buffer: Array<AstObject> = Parse(str, tagOpen, tagClose, env)\n  return (\n    \"var tR='';\" +\n    ParseScope(buffer, env)\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r') +\n    'return tR'\n  )\n}\n\n// TODO: rename parseHelper, parseScope, etc. to compileHelper, compileScope, etc.\n// TODO: Use type intersections for TemplateObject, etc.\n// so I don't have to make properties mandatory\n\nfunction parseHelper (\n  env: SqrlConfig,\n  res: string,\n  descendants: Array<AstObject>,\n  params: string,\n  name?: string\n) {\n  var ret = '{exec:' + ParseScopeIntoFunction(descendants, res, env) + ',params:[' + params + ']'\n  if (name) {\n    ret += \",name:'\" + name + \"'\"\n  }\n  ret += '}'\n  return ret\n}\n\nfunction parseBlocks (blocks: Array<TemplateObject>, env: SqrlConfig) {\n  var ret = '['\n  for (var i = 0; i < blocks.length; i++) {\n    var block = blocks[i]\n    ret += parseHelper(env, block.res || '', block.d || [], block.p || '', block.n || '')\n    if (i < blocks.length) {\n      ret += ','\n    }\n  }\n  ret += ']'\n  return ret\n}\n\nexport function ParseScopeIntoFunction (buff: Array<AstObject>, res: string, env: SqrlConfig) {\n  return 'function(' + res + \"){var tR='';\" + ParseScope(buff, env) + 'return tR}'\n}\n\nexport function ParseScope (buff: Array<AstObject>, env: SqrlConfig) {\n  var i = 0\n  var buffLength = buff.length\n  var returnStr = ''\n\n  for (i; i < buffLength; i++) {\n    var currentBlock = buff[i]\n    if (typeof currentBlock === 'string') {\n      var str = currentBlock\n\n      // we know string exists\n      returnStr += \"tR+='\" + str /*.replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"\\\\'\")*/ + \"';\"\n      // I believe the above replace is already in Parse\n    } else {\n      var type = currentBlock.t // ~, s, !, ?, r\n      var content = currentBlock.c || ''\n      var filters = currentBlock.f || []\n      var name = currentBlock.n || ''\n      var params = currentBlock.p || ''\n      var res = currentBlock.res || ''\n      var blocks = currentBlock.b || []\n\n      if (type === 'r') {\n        if (currentBlock.raw && env.autoEscape) {\n          content = 'Sqrl.F.get(\"e\")(' + content + ')'\n        }\n        var filtered = filter(content, filters)\n        returnStr += 'tR+=' + filtered + ';'\n        // reference\n      } else if (type === '~') {\n        // helper\n        // TODO: native helpers\n        if (NativeHelpers.get(name)) {\n          returnStr += NativeHelpers.get(name)(currentBlock, env)\n        } else {\n          var helperReturn =\n            \"Sqrl.H.get('\" + name + \"')(\" + parseHelper(env, res, currentBlock.d, params)\n          if (blocks) {\n            helperReturn += ',' + parseBlocks(blocks, env)\n          }\n          helperReturn += ')'\n\n          helperReturn = filter(helperReturn, filters)\n          returnStr += 'tR+=' + helperReturn + ';'\n        }\n      } else if (type === 's') {\n        returnStr += 'tR+=' + filter(\"Sqrl.H.get('\" + name + \"')(\" + params + ')', filters) + ';'\n        // self-closing helper\n      } else if (type === '!') {\n        // execute\n        returnStr += content + ';'\n      } else if (type === '?') {\n        // custom (implement later)\n      }\n    }\n  }\n  return returnStr\n}\n\nfunction filter (str: string, filters: Array<Filter>) {\n  for (var i = 0; i < filters.length; i++) {\n    var name = filters[i][0]\n    var params = filters[i][1]\n    str = \"Sqrl.F.get('\" + name + \"')(\" + str\n    if (params) {\n      str += ',' + params\n    }\n    str += ')'\n  }\n  return str\n}\n\nexport default CompileToString\n","interface Dict {\n  [key: string]: SqrlConfig\n}\n\ninterface IEnv {\n  cache: Dict\n  define: (key: string, val: SqrlConfig) => void\n  get: (key: string) => SqrlConfig\n  remove: (key: string) => void\n  clear: () => void\n  load: (cacheObj: Dict) => void\n}\n\nexport interface SqrlConfig {\n  varName: string\n  autoTrim: boolean | 'nl'\n  autoEscape: boolean\n  defaultFilter: false | Function\n  [index: string]: any\n}\n\ntype PartialConfig = {\n  [P in keyof SqrlConfig]?: SqrlConfig[P]\n}\n\nvar defaultConfig: SqrlConfig = {\n  varName: 'it',\n  autoTrim: false,\n  autoEscape: true,\n  defaultFilter: false\n}\n\nvar Env: IEnv = {\n  cache: {\n    default: defaultConfig\n  },\n  define: function (key: string, newConfig: PartialConfig) {\n    if (!this.cache[key]) {\n      this.cache[key] = defaultConfig\n    }\n    for (var attrname in newConfig) {\n      this.cache[key][attrname] = newConfig[attrname]\n    }\n  },\n  get: function (key: string) {\n    // string | array.\n    // TODO: allow array of keys to look down\n    return this.cache[key]\n  },\n  remove: function (key: string) {\n    delete this.cache[key]\n  },\n  clear: function () {\n    this.cache = {}\n  },\n  load: function (cacheObj: Dict) {\n    this.cache = cacheObj\n  }\n}\n\nexport { Env }\n\n// Have different envs. Sqrl.Render, Compile, etc. all use default env\n// Use class for env\n","import CompileToString from './compile-string'\nimport { Env } from './config'\n\nfunction Compile (str: string, tagOpen: string, tagClose: string, envName?: string) {\n  var SqrlEnv = Env.get(envName || 'default')\n  return new Function(SqrlEnv.varName, 'Sqrl', CompileToString(str, tagOpen, tagClose, SqrlEnv)) // eslint-disable-line no-new-func\n}\n\nexport default Compile\n// console.log(Compile('hi {{this}} hey', '{{', '}}').toString())\n","import Compile from './compile'\nimport { Helpers, Filters } from './containers'\n\ntype TemplateFunction = (data: object, Sqrl: object) => string\ntype DetermineEnvFunction = (options?: object) => string\n\nfunction Render (\n  template: string | TemplateFunction,\n  data: object,\n  env?: string | DetermineEnvFunction,\n  options?: object\n) {\n  if (!env) {\n    env = 'default'\n  } else if (typeof env === 'function') {\n    env = env(options) // this can be used to dynamically pick an env based on name, etc.\n  }\n\n  if (typeof template === 'function') {\n    return template(data, { H: Helpers, F: Filters })\n  }\n  // else\n  var templateFunc = Compile(template, '{{', '}}', env)\n  return templateFunc(data, { H: Helpers, F: Filters })\n}\n\nexport default Render\n"],"names":["SqrlErr","message","obj","proto","err","Error","prototype","Object","setPrototypeOf","__proto__","ParseErr","str","indx","whitespace","slice","split","lineNo","length","colNo","Array","join","Parse","tagOpen","tagClose","env","powerchars","RegExp","tagOpenReg","startInd","trimNextLeftWs","parseTag","m","currentObj","f","d","numParens","firstChar","currentAttribute","currentType","addAttrValue","strng","valUnprocessed","val","trim","raw","push","found","search","lastIndex","exec","char","slash","wsControl","i","index","t","parseContext","parentObj","firstParse","b","tagOpenMatch","lastBlock","buffer","pushString","wsAhead","stringToPush","replace","type","String","trimRight","trimLeft","n","create","name","value","enumerable","cache","this","Cacher","key","cacheObj","Layouts","Partials","Helpers","each","content","res","param","params","foreach","hasOwnProperty","NativeHelpers","if","returnStr","p","ParseScope","currentBlock","try","escMap","&","<","\"","'","replaceChar","s","Filters","e","newStr","test","CompileToString","parseHelper","descendants","ret","ParseScopeIntoFunction","parseBlocks","blocks","block","buff","buffLength","c","filters","autoEscape","filter","get","helperReturn","defaultConfig","varName","autoTrim","defaultFilter","Env","default","define","newConfig","attrname","remove","clear","load","Compile","envName","SqrlEnv","Function","Render","template","data","options","H","F","templateFunc"],"mappings":"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"}